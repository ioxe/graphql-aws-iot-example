AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  AppPrefix:
    Type: String
    Default: IOX
  IotEndpoint:
    Type: String
    Default: afbxc4n5814kd.iot.us-west-2.amazonaws.com
    Description: Iot Endpoint for region in which stack is being deployed
  SubscriptionToClientIdsIndex:
    Type: String
    Default: subscriptionToClientId
    Description: Index name for subscription to ClientIds
  ClientIdToSubscriptionsIndex:
    Type: String
    Default: clientIdToSubscription
    Description: Index name for ClientId to Subscription Names index
  TeamNameToTodosIndex:
    Type: String
    Default: teamNameToTodos
    Description: Index name for ClientId to Subscription Names index
  BackendCodeBucket:
    Type: String
    Default: iox-playground
  TodoApiKey:
    Type: String
    Default: todo-api.zip
  SubscriptionPublisherKey:
    Type: String
    Default: todo-subscription-publisher.zip
  SubscriptionPrunerKey:
    Type: String
    Default: todo-subscription-pruner.zip
  OriginAccessIdentity:
    Type: String
    MinLength: 2
    Description: 'You need to create an origin access identity via aws console. Required for cloudfront distribution'
  MaxDynamoDbAutoScalingCapacity:
    Type: Number
    Default: 10
  MinDynamoDbAutoScalingCapacity:
    Type: Number
    Default: 5

Resources:
  # Api that runs graphql serverless subscriptions transport - handles all messages from socket
  TodoApi: 
    Type: AWS::Lambda::Function
    Properties: 
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn 
      Code: 
        S3Bucket: !Ref BackendCodeBucket
        S3Key: !Ref TodoApiKey
      Environment:
        Variables:
          AppPrefix: !Ref AppPrefix
          SubscriptionsTableName: !Ref SubscriptionsTable
          SubscriptionPublisherFunctionName: !Ref SubscriptionPublisher
          TodosTableName: !Ref TodosTable
          TeamNameToTodosIndex: !Ref TeamNameToTodosIndex
          IotEndpoint: !Ref IotEndpoint
      Runtime: 'nodejs6.10'
      Timeout: 10
      TracingConfig:
        Mode: "Active"
  TodoApiInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt TodoApi.Arn
      Action: lambda:InvokeFunction
      Principal: iot.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
  
  # Publisher publishes to all client ids for a particular subscription
  SubscriptionPublisher: 
    Type: AWS::Lambda::Function
    Properties: 
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code: 
        S3Bucket: !Ref BackendCodeBucket
        S3Key: !Ref SubscriptionPublisherKey
      Environment:
        Variables:
          AppPrefix: !Ref AppPrefix
          SubscriptionsTableName: !Ref SubscriptionsTable
          SubscriptionToClientIdsIndex: !Ref SubscriptionToClientIdsIndex
          TodosTableName: !Ref TodosTable
          IotEndpoint: !Ref IotEndpoint
      Runtime: 'nodejs6.10'
      MemorySize: 384
      Timeout: 60
      TracingConfig:
        Mode: "Active"
  
  # Pruner removes client data from all existing subscriptions in subscriptions table on disconnect event
  SubscriptionPruner: 
    Type: AWS::Lambda::Function
    Properties: 
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code: 
        S3Bucket: !Ref BackendCodeBucket
        S3Key: !Ref SubscriptionPrunerKey
      Environment:
        Variables:
          SubscriptionsTableName: !Ref SubscriptionsTable
          ClientIdToSubscriptionsIndex: !Ref ClientIdToSubscriptionsIndex
      Runtime: 'nodejs6.10'
      Timeout: 60
      TracingConfig:
        Mode: "Active"
  SubscriptionPrunerInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt SubscriptionPruner.Arn
      Action: lambda:InvokeFunction
      Principal: iot.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  # Shared execution role for lambdas
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies: 
        - 
          PolicyName: "root"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              -
                Effect: Allow
                Action: 
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'
          
  LambdaExecutionPolicy:
    Type: 'AWS::IAM::Policy'
    Properties: 
      PolicyName: !Sub ${AWS::StackName}LambdaExecutionPolicy
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: Allow
            Action: 
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:BatchGetItem
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
            Resource: 
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TodosTable}
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TodosTable}/index/${TeamNameToTodosIndex}
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SubscriptionsTable}
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SubscriptionsTable}/index/${SubscriptionToClientIdsIndex}
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SubscriptionsTable}/index/${ClientIdToSubscriptionsIndex}
          -
            Effect: Allow
            Action: 
              - iot:Publish
            Resource: '*' # below restriction should work - to debug later
              # - !Sub arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${AppPrefix}/in/* # app prefix = namespace
          -
            Effect: Allow
            Action: 
              - iot:Receive
            Resource:
              - !Sub arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/$aws/events/* # lifecycle events
          - 
            Effect: Allow
            Action: logs:*
            Resource: '*'
          - 
            Effect: Allow
            Action: lambda:InvokeFunction
            Resource:
              - !GetAtt SubscriptionPublisher.Arn
      Roles: 
        - !Ref LambdaExecutionRole
  TodoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
  TodoIdentityPoolRole:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    Properties:
      IdentityPoolId: !Ref TodoIdentityPool
      Roles: 
        unauthenticated: !GetAtt TodoIdentityPoolUnauthenticatedRole.Arn 
  TodoIdentityPoolUnauthenticatedRole:
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - 
            Effect: 'Allow'
            Principal: 
              Federated:
                - 'cognito-identity.amazonaws.com'
            Action: 
                - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref TodoIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': 'unauthenticated'
      Path: '/'
      Policies: 
        - 
          PolicyName: 'unauthpolicy'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - 
                Effect: Allow
                Action: iot:Connect
                Resource: 
                  - !Sub arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/*
              - 
                Effect: Allow
                Action: iot:Publish
                Resource: 
                  - !Sub arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${AppPrefix}/out 
              - 
                Effect: Allow
                Action: 
                  - iot:Subscribe
                Resource: 
                  - !Join ['', ['arn:aws:iot:', !Ref 'AWS::Region',':', !Ref 'AWS::AccountId', ':topicfilter/', !Ref AppPrefix, '/in/${iot:ClientId}']] 
              - 
                Effect: Allow
                Action: 
                  - iot:Receive
                Resource: 
                  - !Join ['', ['arn:aws:iot:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':topic/', !Ref AppPrefix, '/in/${iot:ClientId}']] 
  TodosTable: 
    Type: 'AWS::DynamoDB::Table'
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: 'id'
          AttributeType: 'S'
        - 
          AttributeName: 'teamName'
          AttributeType: 'S'
      KeySchema: 
        - 
          AttributeName: 'id'
          KeyType: 'HASH'
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName: expiration
        Enabled: True
      GlobalSecondaryIndexes:
        -
          IndexName: !Ref TeamNameToTodosIndex
          KeySchema:
            - 
              AttributeName: teamName
              KeyType: HASH
          Projection: 
            ProjectionType: 'ALL'
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
 # AWS IOT Rules
  TodoApiIoTRule: 
    Type: 'AWS::IoT::TopicRule'
    Properties: 
      TopicRulePayload:
        Actions:
          - Lambda:
              FunctionArn: !GetAtt TodoApi.Arn
        RuleDisabled: false
        Sql: !Sub SELECT *, clientId() AS clientId FROM '${AppPrefix}/out'
  SubscriptionPrunerIoTRule: 
    Type: 'AWS::IoT::TopicRule'
    Properties: 
      TopicRulePayload:
        Actions:
          - Lambda:
              FunctionArn: !GetAtt SubscriptionPruner.Arn
        RuleDisabled: false
        Sql: SELECT * FROM '$aws/events/presence/disconnected/#'
  SubscriptionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: clientId
          AttributeType: S
        - 
          AttributeName: subscriptionName
          AttributeType: S
      KeySchema:
        - 
          AttributeName: clientId
          KeyType: HASH
        - 
          AttributeName: subscriptionName
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
        -
          IndexName: !Ref SubscriptionToClientIdsIndex
          KeySchema:
            - 
              AttributeName: subscriptionName
              KeyType: HASH
          Projection: 
            ProjectionType: 'ALL'
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        -
          IndexName: !Ref ClientIdToSubscriptionsIndex
          KeySchema:
            - 
              AttributeName: clientId
              KeyType: HASH
          Projection: 
            NonKeyAttributes:
              - subscriptionName
            ProjectionType: 'INCLUDE'
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

  # Domain for demo
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - HEAD
              - DELETE
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - Date
            MaxAge: '3600'
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'WebsiteBucket'
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'WebsiteBucket', /*]]
            Principal: '*'
  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt WebsiteBucket.DomainName
          Id: graphqlAWSIOTTransportExample
          S3OriginConfig:
            OriginAccessIdentity: !Ref OriginAccessIdentity
        Enabled: 'true'
        DefaultRootObject: index.html
        # Aliases:
        #   - todo.girishnanda.com // update with valid alias that matches custom domain
        DefaultCacheBehavior:
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          TargetOriginId: graphqlAWSIOTTransportExample
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_200
        # ViewerCertificate: // only required if you are using a custom domain
        #   AcmCertificateArn: // update with valid acm certificate arn
        #   SslSupportMethod: sni-only
        CustomErrorResponses:
          - ErrorCachingMinTTL: '0'
            ErrorCode: '404'
            ResponseCode: '200'
            ResponsePagePath: /index.html

  # DDB Autoscaling policies
  TodosTableWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxDynamoDbAutoScalingCapacity
      MinCapacity: !Ref MinDynamoDbAutoScalingCapacity
      ResourceId: !Join [ /, [table, !Ref TodosTable]]
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
  TodosTableWriteScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: !Sub ${AWS::StackId}TodosTableWriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref TodosTableWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  TodosTableReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxDynamoDbAutoScalingCapacity
      MinCapacity: !Ref MinDynamoDbAutoScalingCapacity
      ResourceId: !Join [ /, [table, !Ref TodosTable]]
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb
  TodosTableReadScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: !Sub ${AWS::StackId}TodosTableReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref TodosTableReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
  TeamNameToTodosIndexWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxDynamoDbAutoScalingCapacity
      MinCapacity: !Ref MinDynamoDbAutoScalingCapacity
      ResourceId: !Join [ /, [table, !Ref TodosTable, index, !Ref TeamNameToTodosIndex]]
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:index:WriteCapacityUnits
      ServiceNamespace: dynamodb
  TeamNameToTodosIndexWriteScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: !Sub ${AWS::StackId}TeamNameToTodosIndexWriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref TeamNameToTodosIndexWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  TeamNameToTodosIndexReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxDynamoDbAutoScalingCapacity
      MinCapacity: !Ref MinDynamoDbAutoScalingCapacity
      ResourceId: !Join [ /, [table, !Ref TodosTable, index, !Ref TeamNameToTodosIndex]]
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:index:ReadCapacityUnits
      ServiceNamespace: dynamodb
  TeamNameToTodosIndexReadScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: !Sub ${AWS::StackId}TeamNameToTodosIndexReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref TeamNameToTodosIndexReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
  SubscriptionsTableWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxDynamoDbAutoScalingCapacity
      MinCapacity: !Ref MinDynamoDbAutoScalingCapacity
      ResourceId: !Join [ /, [table, !Ref SubscriptionsTable]]
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
  SubscriptionsTableWriteScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: !Sub ${AWS::StackId}SubscriptionsTableWriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref SubscriptionsTableWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  SubscriptionsTableReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxDynamoDbAutoScalingCapacity
      MinCapacity: !Ref MinDynamoDbAutoScalingCapacity
      ResourceId: !Join [ /, [table, !Ref SubscriptionsTable]]
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb
  SubscriptionsTableReadScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: !Sub ${AWS::StackId}SubscriptionsTableReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref SubscriptionsTableReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
  SubscriptionToClientIdsIndexWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxDynamoDbAutoScalingCapacity
      MinCapacity: !Ref MinDynamoDbAutoScalingCapacity
      ResourceId: !Join [ /, [table, !Ref SubscriptionsTable, index, !Ref SubscriptionToClientIdsIndex]]
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:index:WriteCapacityUnits
      ServiceNamespace: dynamodb
  SubscriptionToClientIdsIndexWriteScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: !Sub ${AWS::StackId}SubscriptionToClientIdsWriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref SubscriptionToClientIdsIndexWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  SubscriptionToClientIdsIndexReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxDynamoDbAutoScalingCapacity
      MinCapacity: !Ref MinDynamoDbAutoScalingCapacity
      ResourceId: !Join [ /, [table, !Ref SubscriptionsTable, index, !Ref SubscriptionToClientIdsIndex]]
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:index:ReadCapacityUnits
      ServiceNamespace: dynamodb
  SubscriptionToClientIdsIndexReadScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: !Sub ${AWS::StackId}SubscriptionToClientIdsReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref SubscriptionToClientIdsIndexReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
  ClientIdToSubscriptionsIndexWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxDynamoDbAutoScalingCapacity
      MinCapacity: !Ref MinDynamoDbAutoScalingCapacity
      ResourceId: !Join [ /, [table, !Ref SubscriptionsTable, index, !Ref ClientIdToSubscriptionsIndex]]
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:index:WriteCapacityUnits
      ServiceNamespace: dynamodb
  ClientIdToSubscriptionsIndexWriteScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: !Sub ${AWS::StackId}ClientIdToSubscriptionsIndexWriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ClientIdToSubscriptionsIndexWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  ClientIdToSubscriptionsIndexReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxDynamoDbAutoScalingCapacity
      MinCapacity: !Ref MinDynamoDbAutoScalingCapacity
      ResourceId: !Join [ /, [table, !Ref SubscriptionsTable, index, !Ref ClientIdToSubscriptionsIndex]]
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:index:ReadCapacityUnits
      ServiceNamespace: dynamodb
  ClientIdToSubscriptionsIndexReadScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: !Sub ${AWS::StackId}ClientIdToSubscriptionsIndexReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ClientIdToSubscriptionsIndexReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
  ScalingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:UpdateTable"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
                Resource: "*"
Outputs:
  WebsiteBucketName:
    Description: Bucket to upload client build.  Needs to be set in  client app package.json to upload new build
    Value: !Ref WebsiteBucket
  WebsiteBucketUrl:
    Description: Url to view client app once build is uploaded to website bucket
    Value: !Join ['', ['https://', !GetAtt CloudfrontDistribution.DomainName]]
  IdentityPoolId:
    Description: Identity pool id. Needs to be set in  client app environment variables
    Value: !Ref TodoIdentityPool 
  IotEndpoint:
    Description: Iot endpoint. Needs to be updated in client app environment variables
    Value: !Ref IotEndpoint
    
