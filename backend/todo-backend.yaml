AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  AppPrefix:
    Type: String
    Default: IOX
Resources:
  TodoApi: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Handler: "index.handler"
      Role: 
        Fn::GetAtt: 
          - "TodoApiExecutionRole"
          - "Arn"
      Code: 
        S3Bucket: "iox-playground"
        S3Key: "todo-api.zip"
      Environment:
        Variables:
          ConnectionsTableName: !Ref SocketConnectionTable
          TodosTableName: !Ref TodosTable
          IotEndpoint: 'afbxc4n5814kd.iot.us-west-2.amazonaws.com'
      Runtime: "nodejs6.10"
      Timeout: "10"
  TodoApiExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies: 
        - 
          PolicyName: !Sub "${AWS::StackId}-todo-api-execution-policy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "dynamodb:*"
                Resource: "*"
              - 
                Effect: "Allow"
                Action: "iot:*"
                Resource: "*"
              - 
                Effect: "Allow"
                Action: 'logs:*'
                Resource: '*'
  TodoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: 'serverlesstodos'
      AllowUnauthenticatedIdentities: true
  TodoIdentityPoolRole:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref TodoIdentityPool
      Roles: 
        unauthenticated: !GetAtt TodoIdentityPoolUnauthenticatedRole.Arn 
  TodoIdentityPoolUnauthenticatedRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Federated:
                - "cognito-identity.amazonaws.com"
            Action: 
                - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref TodoIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': 'unauthenticated'
      Path: "/"
      Policies: 
        - 
          PolicyName: "unauthpolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "iot:*"
                Resource: "*"
              - 
                Effect: "Allow"
                Action: "lambda:*"
                Resource: "*"
  TodosTable: 
    Type: "AWS::DynamoDB::Table"
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TimeToLiveSpecification:
        AttributeName: expiration
        Enabled: true
  TodoApiIoTRule: 
    Type: "AWS::IoT::TopicRule"
    Properties: 
      TopicRulePayload:
        Actions:
          - Kinesis:
              RoleArn: !Ref EventStreamExecutionRole
              StreamName: !Ref EventStreamFromClient
        RuleDisabled: false
        Sql: !Sub SELECT *, clientId() AS clientId FROM '${AppPrefix}/out'
  TodoApiEventSourceMapping:
      Type: "AWS::Lambda::EventSourceMapping"
      EventSourceArn: !Join ['', ['arn:aws:kinesis:', !Ref AWS::Region, ':', !Ref: AWS:AccountId, ':stream/', !Ref: EventStreamFromClient]]
  SocketConnectionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: clientId
          AttributeType: S
      KeySchema:
        - AttributeName: clientId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  EventStreamFromClient:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      RetentionPeriodHours: 168
      ShardCount: 1  
  EventStreamExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - iot.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies: 
        - 
          PolicyName: !Sub "${AWS::StackId}-todo-api-execution-policy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "kinesis:*"
                Resource: "*"